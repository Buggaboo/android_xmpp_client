package nl.sison.xmpp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import nl.sison.xmpp.dao.BuddyEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BUDDY_ENTITY.
*/
public class BuddyEntityDao extends AbstractDao<BuddyEntity, Long> {

    public static final String TABLENAME = "BUDDY_ENTITY";

    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Partial_jid = new Property(1, String.class, "partial_jid", false, "PARTIAL_JID");
        public final static Property Last_seen_resource = new Property(2, String.class, "last_seen_resource", false, "LAST_SEEN_RESOURCE");
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "NICKNAME");
        public final static Property Presence_status = new Property(4, String.class, "presence_status", false, "PRESENCE_STATUS");
        public final static Property Presence_mode = new Property(5, String.class, "presence_mode", false, "PRESENCE_MODE");
        public final static Property Presence_type = new Property(6, String.class, "presence_type", false, "PRESENCE_TYPE");
        public final static Property Last_chat_date = new Property(7, java.util.Date.class, "last_chat_date", false, "LAST_CHAT_DATE");
    };


    public BuddyEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BuddyEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'BUDDY_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'PARTIAL_JID' TEXT NOT NULL ," + // 1: partial_jid
                "'LAST_SEEN_RESOURCE' TEXT NOT NULL ," + // 2: last_seen_resource
                "'NICKNAME' TEXT NOT NULL ," + // 3: nickname
                "'PRESENCE_STATUS' TEXT," + // 4: presence_status
                "'PRESENCE_MODE' TEXT," + // 5: presence_mode
                "'PRESENCE_TYPE' TEXT," + // 6: presence_type
                "'LAST_CHAT_DATE' INTEGER);"; // 7: last_chat_date
        db.execSQL(sql);
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BUDDY_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BuddyEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPartial_jid());
        stmt.bindString(3, entity.getLast_seen_resource());
        stmt.bindString(4, entity.getNickname());
 
        String presence_status = entity.getPresence_status();
        if (presence_status != null) {
            stmt.bindString(5, presence_status);
        }
 
        String presence_mode = entity.getPresence_mode();
        if (presence_mode != null) {
            stmt.bindString(6, presence_mode);
        }
 
        String presence_type = entity.getPresence_type();
        if (presence_type != null) {
            stmt.bindString(7, presence_type);
        }
 
        java.util.Date last_chat_date = entity.getLast_chat_date();
        if (last_chat_date != null) {
            stmt.bindLong(8, last_chat_date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BuddyEntity readEntity(Cursor cursor, int offset) {
        BuddyEntity entity = new BuddyEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // partial_jid
            cursor.getString(offset + 2), // last_seen_resource
            cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // presence_status
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // presence_mode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // presence_type
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // last_chat_date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BuddyEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPartial_jid(cursor.getString(offset + 1));
        entity.setLast_seen_resource(cursor.getString(offset + 2));
        entity.setNickname(cursor.getString(offset + 3));
        entity.setPresence_status(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPresence_mode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPresence_type(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLast_chat_date(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    @Override
    protected Long updateKeyAfterInsert(BuddyEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BuddyEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
