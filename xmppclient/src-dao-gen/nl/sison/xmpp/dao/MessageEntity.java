package nl.sison.xmpp.dao;

import nl.sison.xmpp.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table MESSAGE_ENTITY.
 */
public class MessageEntity {

    private Long id;
    /** Not-null value. */
    private String sender_jid;
    /** Not-null value. */
    private String receiver_jid;
    /** Not-null value. */
    private String content;
    /** Not-null value. */
    private java.util.Date processed_date;
    private java.util.Date received_date;
    private java.util.Date sent_date;
    private Boolean delivered;
    private String thread;
    private long buddyId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MessageEntityDao myDao;

    private BuddyEntity buddyEntity;
    private Long buddyEntity__resolvedKey;


    public MessageEntity() {
    }

    public MessageEntity(Long id) {
        this.id = id;
    }

    public MessageEntity(Long id, String sender_jid, String receiver_jid, String content, java.util.Date processed_date, java.util.Date received_date, java.util.Date sent_date, Boolean delivered, String thread, long buddyId) {
        this.id = id;
        this.sender_jid = sender_jid;
        this.receiver_jid = receiver_jid;
        this.content = content;
        this.processed_date = processed_date;
        this.received_date = received_date;
        this.sent_date = sent_date;
        this.delivered = delivered;
        this.thread = thread;
        this.buddyId = buddyId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMessageEntityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getSender_jid() {
        return sender_jid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSender_jid(String sender_jid) {
        this.sender_jid = sender_jid;
    }

    /** Not-null value. */
    public String getReceiver_jid() {
        return receiver_jid;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setReceiver_jid(String receiver_jid) {
        this.receiver_jid = receiver_jid;
    }

    /** Not-null value. */
    public String getContent() {
        return content;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setContent(String content) {
        this.content = content;
    }

    /** Not-null value. */
    public java.util.Date getProcessed_date() {
        return processed_date;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setProcessed_date(java.util.Date processed_date) {
        this.processed_date = processed_date;
    }

    public java.util.Date getReceived_date() {
        return received_date;
    }

    public void setReceived_date(java.util.Date received_date) {
        this.received_date = received_date;
    }

    public java.util.Date getSent_date() {
        return sent_date;
    }

    public void setSent_date(java.util.Date sent_date) {
        this.sent_date = sent_date;
    }

    public Boolean getDelivered() {
        return delivered;
    }

    public void setDelivered(Boolean delivered) {
        this.delivered = delivered;
    }

    public String getThread() {
        return thread;
    }

    public void setThread(String thread) {
        this.thread = thread;
    }

    public long getBuddyId() {
        return buddyId;
    }

    public void setBuddyId(long buddyId) {
        this.buddyId = buddyId;
    }

    /** To-one relationship, resolved on first access. */
    public BuddyEntity getBuddyEntity() {
        if (buddyEntity__resolvedKey == null || !buddyEntity__resolvedKey.equals(buddyId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BuddyEntityDao targetDao = daoSession.getBuddyEntityDao();
            buddyEntity = targetDao.load(buddyId);
            buddyEntity__resolvedKey = buddyId;
        }
        return buddyEntity;
    }

    public void setBuddyEntity(BuddyEntity buddyEntity) {
        if (buddyEntity == null) {
            throw new DaoException("To-one property 'buddyId' has not-null constraint; cannot set to-one to null");
        }
        this.buddyEntity = buddyEntity;
        buddyId = buddyEntity.getId();
        buddyEntity__resolvedKey = buddyId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
