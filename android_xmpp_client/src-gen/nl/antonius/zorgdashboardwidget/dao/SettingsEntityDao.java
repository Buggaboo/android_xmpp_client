package nl.antonius.zorgdashboardwidget.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import nl.antonius.zorgdashboardwidget.dao.SettingsEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SETTINGS_ENTITY.
*/
public class SettingsEntityDao extends AbstractDao<SettingsEntity, Long> {

    public static final String TABLENAME = "SETTINGS_ENTITY";

    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Xmpp_port = new Property(1, String.class, "xmpp_port", false, "XMPP_PORT");
        public final static Property Xmpp_server = new Property(2, String.class, "xmpp_server", false, "XMPP_SERVER");
        public final static Property Xmpp_username = new Property(3, String.class, "xmpp_username", false, "XMPP_USERNAME");
        public final static Property Xmpp_password = new Property(4, String.class, "xmpp_password", false, "XMPP_PASSWORD");
        public final static Property Xmpp_jid = new Property(5, String.class, "xmpp_jid", false, "XMPP_JID");
        public final static Property Xmpp_resource = new Property(6, String.class, "xmpp_resource", false, "XMPP_RESOURCE");
    };


    public SettingsEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SettingsEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String sql = "CREATE TABLE " + (ifNotExists? "IF NOT EXISTS ": "") + "'SETTINGS_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'XMPP_PORT' TEXT," + // 1: xmpp_port
                "'XMPP_SERVER' TEXT," + // 2: xmpp_server
                "'XMPP_USERNAME' TEXT NOT NULL ," + // 3: xmpp_username
                "'XMPP_PASSWORD' TEXT NOT NULL ," + // 4: xmpp_password
                "'XMPP_JID' TEXT NOT NULL ," + // 5: xmpp_jid
                "'XMPP_RESOURCE' TEXT);"; // 6: xmpp_resource
        db.execSQL(sql);
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SETTINGS_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SettingsEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String xmpp_port = entity.getXmpp_port();
        if (xmpp_port != null) {
            stmt.bindString(2, xmpp_port);
        }
 
        String xmpp_server = entity.getXmpp_server();
        if (xmpp_server != null) {
            stmt.bindString(3, xmpp_server);
        }
        stmt.bindString(4, entity.getXmpp_username());
        stmt.bindString(5, entity.getXmpp_password());
        stmt.bindString(6, entity.getXmpp_jid());
 
        String xmpp_resource = entity.getXmpp_resource();
        if (xmpp_resource != null) {
            stmt.bindString(7, xmpp_resource);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SettingsEntity readEntity(Cursor cursor, int offset) {
        SettingsEntity entity = new SettingsEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // xmpp_port
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // xmpp_server
            cursor.getString(offset + 3), // xmpp_username
            cursor.getString(offset + 4), // xmpp_password
            cursor.getString(offset + 5), // xmpp_jid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // xmpp_resource
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SettingsEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setXmpp_port(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setXmpp_server(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setXmpp_username(cursor.getString(offset + 3));
        entity.setXmpp_password(cursor.getString(offset + 4));
        entity.setXmpp_jid(cursor.getString(offset + 5));
        entity.setXmpp_resource(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected Long updateKeyAfterInsert(SettingsEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SettingsEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
